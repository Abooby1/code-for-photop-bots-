"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Editor = void 0;
class EditorError extends Error {
    constructor(message) {
        super(message);
        this.name = "EditorError";
    }
}
const VerifyEmailRegex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
const VerifyUsernameRegex = /[A-Za-z0-9_-]{3,16}/;
/**
 * Interface for batching edits together; NOT DONE
 */
class Editor {
    constructor(_network) {
        this._network = _network;
        this._modified = {};
    }
    setEmail(email) {
        if (VerifyEmailRegex.test(email)) {
            return this;
        }
        else {
            throw new TypeError("Invalid email");
        }
    }
    setUsername(username) {
        if (VerifyUsernameRegex.test(username)) {
            this._modified.username = username;
            return this;
        }
        else {
            throw new TypeError("Invalid username");
        }
    }
    setPassword(oldpassword, password) {
        if (password.length < 8)
            throw new TypeError("Password is too short");
        if (/\d/.test(password))
            throw new TypeError("Password does not contain a number");
        if (/[ !@#$%^&*()+\-_=\[\]{};':"\\|,.<>\/?]/.test(password))
            throw new TypeError("Password does not contain a special character");
        this._modified.password = {
            OldPassword: oldpassword,
            NewPassword: password,
        };
        return this;
    }
    save() {
        return __awaiter(this, void 0, void 0, function* () {
            const updates = [];
            if (this._modified.username) {
                updates.push({ Change: "Username", NewText: this._modified.username });
            }
            else if (this._modified.password) {
                updates.push(Object.assign({ Change: "Password" }, this._modified.password));
            }
            else if (this._modified.email) {
                updates.push({ Change: "Email", Email: this._modified.email });
            }
            const result = yield this._network.message("UpdateAccountData", { Update: [] });
            switch (result.Body.Code) {
                case 200:
                    return true;
                case 400:
                    throw new EditorError("Image file size too large");
                case 403:
                    throw new EditorError("Password is incorrect");
            }
        });
    }
}
exports.Editor = Editor;
(editor) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        editor.setEmail("yourmom@mommy.com").setUsername("Your_mom").save();
    }
    catch (e) {
        console.log(e);
    }
});
//# sourceMappingURL=editor.js.map